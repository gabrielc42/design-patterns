design patterns:

builder: collects many constructors into one tight constructor

factory: class that gathers classes of similar extension/implementations

prototype: copy original object to a new object, then modify it accordingly

singleton: one object instantiation to a class

adapter: constructor's instance of a different abstract/interface type, translates
paramerters to appropriate format and directly calls one or several methods of
the wrapped object

bridge: 
separate out responsibilities into different abstract classes
- when parent abstract class defines basic rules, then concrete classes add
rules
- abstract class that references objects, abstract methods that will be defined
in each of the concrete classes

composite: treating individual objects and compositions of objects in the same way


decorator
facade
flyweight
proxy
chain of responsibility
command
interpreter
iterator
mediator
memento
null object
observer
state
strategy
template
visitor
